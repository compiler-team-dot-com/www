* The Impcore language in OCaml
Here.

Some OCaml,

#+begin_src ocaml
let x = 42 in x
#+end_src

** Metavariables

x, =x= $x_1$, \(x_1\).

\begin{array}{cc}
  a & b \\
  c & c
\end{array}

| $e$ | Any expression                                           |
| $d$ | Any definition                                           |
| $n$ | Any numeral                                              |
| $x$ | Any name that is meant to refer to variable or parameter |
| $f$ | Any name that is meant to refer to a function            |

** Environments

- Environment $\xi$ holds values for global variables.
- Environment $\phi$ holds definitions of functions.
- Environment $\rho$ holds values of a function's parameters.

Environments $\xi$ and $\phi$ are global and shared, but there is a distinct $\rho$ for every function call. Together, their contents comprise Impcore's /basis/.

*** Operating on environments

Using function notation:

- An empty environment, which does not bind any names, is written $\{\}$.
- Whatever is associated with name $x$ in the environment $\rho$ is written $\rho(x)$.
- The set of names bound in environment $\rho$ is written $\text{dom } \rho$.
- An *extended environment* $\rho$, plus a binding of the name $x$ to $v$, is written $\rho \{ x \mapsto v\}$.
- In an extended environment, the new binding hides previous bindings of $x$:

\begin{array}
$\rho\{ x \mapsto v \}(y) =
  \begin{cases}
  v, & \text{when $x = y$} \\
  \rho(y), & \text{when $x \neq y$}
  \end{cases}
\end{array}

** Operational Semantics
An /abstract machine/ and rules for its execution.

Metavariables of Impcore's operational semantics:

| $e, e_i$              | An expression                                   |
| $d$                   | A definition                                    |
| $x, x_i$              | A name that refers to a variable or a parameter |
| $f$                   | A name that refers to a function                |
| $v, v_i$              | A value                                         |
| $\xi, \xi', \ldots$   | A global-variable environment                   |
| $\phi, \phi', \ldots$ | A function-definition environment               |
| $\rho, \rho', \ldots$ | A formal-parameter environment                  |

The states and transitions are described using the metavariables above.

- Evaluating a definition $d$: $\langle d, \xi, \phi \rangle$ (definitions do not appear inside functions).
- Evaluating an expression $e$: $\langle e, \xi, \phi, \rho \rangle$.
- Between evaluations: $\langle \xi, \phi \rangle$.
